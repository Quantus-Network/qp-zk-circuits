name: Create Workspace Release Proposal

env:
  CARGO_TERM_COLOR: always

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch for the PR (default: main)'
        required: false
        type: string
        default: 'main'
      version_type:
        description: 'Type of version bump (major, minor, patch) or specify custom version'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      custom_version:
        description: 'Custom version string (e.g., v0.1.2). Only used if version_type is "custom". MUST start with "v"'
        required: false
      is_draft:
        description: 'Is this a draft release?'
        required: true
        type: boolean
        default: false

jobs:
  calculate-next-version:
    name: üßÆ Calculate Next Workspace Version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.versioner.outputs.new_version }}
      commit_sha_short: ${{ steps.vars.outputs.commit_sha_short }}
      source_branch: ${{ steps.vars.outputs.source_branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get current branch and commit SHA
        id: vars
        run: |
          echo "commit_sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "source_branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT

      - name: Get latest workspace tag
        id: latest_tag
        run: |
          # Get all workspace version tags and sort them by version
          latest_semver_tag=$(git tag -l "zk-circuits-v[0-9]*.[0-9]*.[0-9]*" | sort -V | tail -n 1)

          # If no tags found, use default
          if [ -z "$latest_semver_tag" ]; then
            latest_semver_tag="zk-circuits-v0.0.0"
          fi

          echo "latest_tag_found=$latest_semver_tag" >> $GITHUB_OUTPUT
          echo "Latest workspace semantic version tag found: $latest_semver_tag"

      - name: Calculate new version
        id: versioner
        env:
          LATEST_TAG: ${{ steps.latest_tag.outputs.latest_tag_found }}
          VERSION_TYPE: ${{ github.event.inputs.version_type }}
          CUSTOM_VERSION: ${{ github.event.inputs.custom_version }}
        run: |
          # Remove 'zk-circuits-v' prefix for processing
          current_version=${LATEST_TAG#zk-circuits-v}

          if [[ "$VERSION_TYPE" == "custom" ]]; then
            if [[ -z "$CUSTOM_VERSION" ]]; then
              echo "Error: Custom version is selected but no custom_version string provided."
              exit 1
            fi
            if [[ ! "$CUSTOM_VERSION" =~ ^v ]]; then
              echo "Error: Custom version string MUST start with 'v' (e.g., v1.2.3)."
              exit 1
            fi
            new_version="zk-circuits-$CUSTOM_VERSION"
          else
            # Split version into parts
            IFS='.' read -r major minor patch <<< "$current_version"

            # Increment based on type
            if [[ "$VERSION_TYPE" == "major" ]]; then
              major=$((major + 1))
              minor=0
              patch=0
            elif [[ "$VERSION_TYPE" == "minor" ]]; then
              minor=$((minor + 1))
              patch=0
            elif [[ "$VERSION_TYPE" == "patch" ]]; then
              patch=$((patch + 1))
            else
              echo "Error: Invalid version_type: $VERSION_TYPE"
              exit 1
            fi
            new_version="zk-circuits-v$major.$minor.$patch"
          fi

          echo "New workspace version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

  update-workspace-version:
    name: üìù Update Workspace Version
    needs: calculate-next-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create version bump branch and PR
        env:
          NEW_VERSION: ${{ needs.calculate-next-version.outputs.new_version }}
          GITHUB_TOKEN: ${{ secrets.ADMIN_PAT }}
          SOURCE_BRANCH: ${{ needs.calculate-next-version.outputs.source_branch }}
          TARGET_BRANCH: ${{ github.event.inputs.target_branch }}
        run: |
          set -ex
          # Extract numeric version without prefix
          new_cargo_version=${NEW_VERSION#zk-circuits-v}
          branch_name="release/${NEW_VERSION}"

          # Create new branch from source branch
          git checkout "$SOURCE_BRANCH"
          git checkout -b "$branch_name"

          # Update workspace package version in root Cargo.toml
          echo "Updating [workspace.package] version in Cargo.toml to: $new_cargo_version"
          sed -i -E "s/^(version\s*=\s*)\"[0-9a-zA-Z.-]+\"/\\1\"$new_cargo_version\"/" Cargo.toml

          # Helper to set or insert version in dependency table (idempotent for one-line deps)
          set_dep_version() {
            local file="$1" dep="$2" ver="$3"
            # If version exists inside the dependency braces, replace it
            sed -i -E "/^${dep}\\s*=\\s*\\{[^}]*version\\s*=/ s/(version\\s*=\\s*\")[^"]*(\".*)/\\1${ver}\\2/" "$file"
            # If version not present, insert after opening brace
            sed -i -E "s#(^${dep}\\s*=\\s*\\{)#\\1 version = \"${ver}\",#" "$file"
          }

          echo "Injecting internal dependency versions across workspace"

          # wormhole/circuit depends on zk-circuits-common
          set_dep_version wormhole/circuit/Cargo.toml zk-circuits-common "$new_cargo_version"

          # wormhole/prover depends on wormhole-circuit and zk-circuits-common
          set_dep_version wormhole/prover/Cargo.toml wormhole-circuit "$new_cargo_version"
          set_dep_version wormhole/prover/Cargo.toml zk-circuits-common "$new_cargo_version"

          # wormhole/verifier depends on zk-circuits-common and wormhole-circuit
          set_dep_version wormhole/verifier/Cargo.toml zk-circuits-common "$new_cargo_version"
          set_dep_version wormhole/verifier/Cargo.toml wormhole-circuit "$new_cargo_version"

          # voting depends on zk-circuits-common
          set_dep_version voting/Cargo.toml zk-circuits-common "$new_cargo_version"

          # wormhole/aggregator depends on internal crates
          set_dep_version wormhole/aggregator/Cargo.toml wormhole-prover "$new_cargo_version"
          set_dep_version wormhole/aggregator/Cargo.toml wormhole-verifier "$new_cargo_version"
          set_dep_version wormhole/aggregator/Cargo.toml wormhole-circuit "$new_cargo_version"
          set_dep_version wormhole/aggregator/Cargo.toml zk-circuits-common "$new_cargo_version"

          # Non-published crates: example, circuit-builder, tests, test-helpers (for consistency)
          set_dep_version wormhole/example/Cargo.toml wormhole-circuit "$new_cargo_version"
          set_dep_version wormhole/example/Cargo.toml wormhole-prover "$new_cargo_version"
          set_dep_version wormhole/example/Cargo.toml zk-circuits-common "$new_cargo_version"
          set_dep_version wormhole/circuit-builder/Cargo.toml wormhole-circuit "$new_cargo_version"
          set_dep_version wormhole/circuit-builder/Cargo.toml zk-circuits-common "$new_cargo_version"
          set_dep_version wormhole/tests/Cargo.toml wormhole-aggregator "$new_cargo_version"
          set_dep_version wormhole/tests/Cargo.toml wormhole-circuit "$new_cargo_version"
          set_dep_version wormhole/tests/Cargo.toml wormhole-prover "$new_cargo_version"
          set_dep_version wormhole/tests/Cargo.toml wormhole-verifier "$new_cargo_version"
          set_dep_version wormhole/tests/Cargo.toml zk-circuits-common "$new_cargo_version"
          set_dep_version wormhole/tests/test-helpers/Cargo.toml wormhole-circuit "$new_cargo_version"
          set_dep_version wormhole/tests/test-helpers/Cargo.toml zk-circuits-common "$new_cargo_version"

          # wormhole/aggregator depends on multiple internal crates
          sed -i -E "s#^(wormhole-prover\s*=\s*\{)([^}]*)\}#\\1 version = \"$new_cargo_version\", \2}#" wormhole/aggregator/Cargo.toml
          sed -i -E "s#^(wormhole-verifier\s*=\s*\{)([^}]*)\}#\\1 version = \"$new_cargo_version\", \2}#" wormhole/aggregator/Cargo.toml
          sed -i -E "s#^(wormhole-circuit\s*=\s*\{)([^}]*)\}#\\1 version = \"$new_cargo_version\", \2}#" wormhole/aggregator/Cargo.toml
          sed -i -E "s#^(zk-circuits-common\s*=\s*\{)([^}]*)\}#\\1 version = \"$new_cargo_version\", \2}#" wormhole/aggregator/Cargo.toml

          # Ensure lockfile updated
          cargo update -w

          # Install formatters
          rustup component add rustfmt --toolchain nightly
          cargo install taplo-cli --locked

          # Format TOML and Rust code to satisfy CI checks
          taplo format --config taplo.toml
          cargo +nightly fmt --all

          # Commit changes
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

          git add Cargo.toml wormhole/circuit/Cargo.toml wormhole/prover/Cargo.toml wormhole/verifier/Cargo.toml voting/Cargo.toml Cargo.lock || true
          git commit -m "ci: Automate workspace version bump to $NEW_VERSION"
          git push origin "$branch_name"

          PR_TITLE="ci: Automate workspace version bump to $NEW_VERSION"

          # Prepare labels
          PR_LABELS="automated,release-proposal"
          if [[ "${{ github.event.inputs.is_draft }}" == "true" ]]; then
            PR_LABELS="$PR_LABELS,draft-release"
          fi

          gh pr create \
            --title "$PR_TITLE" \
            --body "$(printf "Automated workspace version bump for release %s.\n\n%s\n\nTriggered by workflow run: %s\n\nType: %s" "$NEW_VERSION" "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" "${{ github.event.inputs.version_type }}")" \
            --base "$TARGET_BRANCH" \
            --head "$branch_name" \
            --label "$PR_LABELS"


