//! Verifier logic for the Wormhole circuit.
//!
//! This module provides the [`WormholeVerifier`] type, which allows for the verification of
//! zero-knowledge proofs generated by the Wormhole circuit.
//!
//! The typical usage flow involves:
//! 1. Initializing the verifier (e.g., via [`WormholeVerifier::default`] or [`WormholeVerifier::new`]).
//! 2. Obtaining a [`ProofWithPublicInputs`] from a [`wormhole_prover::WormholeProver`].
//! 3. Verifying the proof using [`WormholeVerifier::verify`].
//!
//!# Example
//!
//! Create a verifier and verify a proof:
//!
//!```
//! use wormhole_circuit::inputs::CircuitInputs;
//! use wormhole_prover::WormholeProver;
//! use wormhole_verifier::WormholeVerifier;
//! #
//! # fn main() -> anyhow::Result<()> {
//! # let inputs = CircuitInputs::test_inputs();
//! # let prover = WormholeProver::default();
//! # let proof = prover.commit(&inputs)?.prove()?;
//!
//! let verifier = WormholeVerifier::default();
//! verifier.verify(proof)?;
//! # Ok(())
//! # }
//! ```
use plonky2::plonk::circuit_data::{CircuitConfig, VerifierCircuitData};

use wormhole_circuit::circuit::{WormholeCircuit, C, D, F};

pub use plonky2::plonk::proof::ProofWithPublicInputs;

pub struct WormholeVerifier {
    pub circuit_data: VerifierCircuitData<F, C, D>,
}

impl Default for WormholeVerifier {
    fn default() -> Self {
        let wormhole_circuit = WormholeCircuit::default();
        let circuit_data = wormhole_circuit.build_verifier();

        Self { circuit_data }
    }
}

impl WormholeVerifier {
    /// Creates a new [`WormholeVerifier`]. Optionally, a [`VerifierCircuitData`] can be passed in
    /// to skip the circuit compilation step.
    pub fn new(config: CircuitConfig, circuit_data: Option<VerifierCircuitData<F, C, D>>) -> Self {
        let wormhole_circuit = WormholeCircuit::new(config);
        let circuit_data = match circuit_data {
            Some(circuit_data) => circuit_data,
            None => wormhole_circuit.build_verifier(),
        };

        Self { circuit_data }
    }

    /// Verify a [`ProofWithPublicInputs`] generated from a [`crate::prover::WormholeProver`].
    ///
    /// # Errors
    ///
    /// Returns an error if the proof is not valid.
    pub fn verify(&self, proof: ProofWithPublicInputs<F, C, D>) -> anyhow::Result<()> {
        self.circuit_data.verify(proof)
    }
}

#[cfg(test)]
mod tests {
    // use std::fs;
    use super::WormholeVerifier;
    use plonky2::plonk::circuit_data::CircuitConfig;
    use plonky2::plonk::proof::ProofWithPublicInputs;
    // use plonky2::util::serialization::DefaultGateSerializer;
    use wormhole_circuit::codec::FieldElementCodec;
    use wormhole_circuit::inputs::CircuitInputs;
    use wormhole_circuit::substrate_account::SubstrateAccount;
    use wormhole_prover::WormholeProver;

    const CIRCUIT_CONFIG: CircuitConfig = CircuitConfig::standard_recursion_config();

    #[test]
    fn verify_simple_proof() {
        let prover = WormholeProver::new(CIRCUIT_CONFIG);
        let inputs = CircuitInputs::test_inputs();
        let proof = prover.commit(&inputs).unwrap().prove().unwrap();

        let verifier = WormholeVerifier::new(CIRCUIT_CONFIG, None);
        // let circuit_bytes = verifier.circuit_data.to_bytes(&DefaultGateSerializer).unwrap();
        // fs::write("verifier.bin", circuit_bytes).unwrap();

        verifier.verify(proof).unwrap();
    }

    #[test]
    fn cannot_verify_with_modified_exit_account() {
        let prover = WormholeProver::new(CIRCUIT_CONFIG);
        let inputs = CircuitInputs::test_inputs();
        let mut proof = prover.commit(&inputs).unwrap().prove().unwrap();

        println!("proof before: {:?}", proof.public_inputs);
        let exit_account = SubstrateAccount::from_field_elements(&proof.public_inputs[10..14]);
        println!("exit_account: {:?}", exit_account);
        let modified_exit_account = SubstrateAccount::new(&[8u8; 32]).unwrap();
        proof.public_inputs[10..14].copy_from_slice(&modified_exit_account.to_field_elements());
        println!("proof after: {:?}", proof.public_inputs);

        let verifier = WormholeVerifier::new(CIRCUIT_CONFIG, None);
        let result = verifier.verify(proof);
        assert!(
            result.is_err(),
            "Expected proof to fail with modified exit_account"
        );
    }

    #[test]
    fn cannot_verify_with_any_public_input_modification() {
        let prover = WormholeProver::new(CIRCUIT_CONFIG);
        let inputs = CircuitInputs::test_inputs();
        let proof = prover.commit(&inputs).unwrap().prove().unwrap();
        let verifier = WormholeVerifier::new(CIRCUIT_CONFIG, None);

        for ix in 0..proof.public_inputs.len() {
            let mut p = proof.clone();
            for jx in 0..8 {
                p.public_inputs[ix].0 ^= 255 << (8 * jx);
                let result = verifier.verify(p.clone());
                assert!(
                    result.is_err(),
                    "Expected proof to fail with modified inputs"
                );
            }
        }
    }

    #[ignore]
    #[test]
    fn cannot_verify_with_modified_proof() {
        let prover = WormholeProver::new(CIRCUIT_CONFIG);
        let inputs = CircuitInputs::test_inputs();
        let proof = prover.commit(&inputs).unwrap().prove().unwrap();
        let verifier = WormholeVerifier::new(CIRCUIT_CONFIG, None);

        let proof_bytes = proof.to_bytes();
        println!("proof length: {:?}", proof_bytes.len());
        for ix in 0..proof_bytes.len() {
            println!("proof_bytes[{}]: {:?}", ix, proof_bytes[ix]);
            let mut b = proof_bytes.clone();
            b[ix] ^= 255;
            let result1 = ProofWithPublicInputs::from_bytes(b, &verifier.circuit_data.common);
            match result1 {
                Ok(p) => {
                    let result2 = verifier.verify(p.clone());
                    assert!(result2.is_err(), "Expected modified proof to fail");
                }
                Err(_) => {
                    continue;
                }
            }
        }
    }
}
