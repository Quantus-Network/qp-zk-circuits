//! Verifier logic for the Wormhole circuit.
//!
//! This module provides the [`WormholeVerifier`] type, which allows for the verification of
//! zero-knowledge proofs generated by the Wormhole circuit.
//!
//! The typical usage flow involves:
//! 1. Initializing the verifier (e.g., via [`WormholeVerifier::default`] or [`WormholeVerifier::new`]).
//! 2. Obtaining a [`ProofWithPublicInputs`] from a [`wormhole_prover::WormholeProver`].
//! 3. Verifying the proof using [`WormholeVerifier::verify`].
//!
//!# Example
//!
//! Create a verifier and verify a proof:
//!
//!```
//! use wormhole_circuit::inputs::{CircuitInputs, PrivateCircuitInputs, PublicCircuitInputs};
//! use wormhole_circuit::nullifier::Nullifier;
//! use wormhole_circuit::substrate_account::SubstrateAccount;
//! use wormhole_circuit::unspendable_account::UnspendableAccount;
//! use wormhole_prover::WormholeProver;
//! use wormhole_verifier::WormholeVerifier;
//! use plonky2::plonk::circuit_data::CircuitConfig;
//!
//! # fn main() -> anyhow::Result<()> {
//! // Create inputs
//! let inputs = CircuitInputs {
//!     private: PrivateCircuitInputs {
//!         secret: vec![1u8; 32],
//!         funding_nonce: 0,
//!         funding_account: SubstrateAccount::new(&[2u8; 32])?,
//!         storage_proof: vec![],
//!         unspendable_account: UnspendableAccount::new(&[1u8; 32]),
//!     },
//!     public: PublicCircuitInputs {
//!         funding_amount: 1000,
//!         nullifier: Nullifier::new(&[1u8; 32], 0, &[2u8; 32]),
//!         root_hash: [0u8; 32],
//!         exit_account: SubstrateAccount::new(&[2u8; 32])?,
//!     },
//! };
//!
//! // Generate a proof
//! let config = CircuitConfig::standard_recursion_config();
//! let prover = WormholeProver::new(config.clone());
//! let proof = prover.commit(&inputs)?.prove()?;
//!
//! // Verify the proof
//! let verifier = WormholeVerifier::new(config, None);
//! verifier.verify(proof)?;
//! # Ok(())
//! # }
//! ```
use plonky2::plonk::circuit_data::{CircuitConfig, VerifierCircuitData};

use common::circuit::{C, D, F};
use wormhole_circuit::circuit::WormholeCircuit;

pub use plonky2::plonk::proof::ProofWithPublicInputs;

pub struct WormholeVerifier {
    pub circuit_data: VerifierCircuitData<F, C, D>,
}

impl Default for WormholeVerifier {
    fn default() -> Self {
        let wormhole_circuit = WormholeCircuit::default();
        let circuit_data = wormhole_circuit.build_verifier();

        Self { circuit_data }
    }
}

impl WormholeVerifier {
    /// Creates a new [`WormholeVerifier`]. Optionally, a [`VerifierCircuitData`] can be passed in
    /// to skip the circuit compilation step.
    pub fn new(config: CircuitConfig, circuit_data: Option<VerifierCircuitData<F, C, D>>) -> Self {
        let wormhole_circuit = WormholeCircuit::new(config);
        let circuit_data = match circuit_data {
            Some(circuit_data) => circuit_data,
            None => wormhole_circuit.build_verifier(),
        };

        Self { circuit_data }
    }

    /// Verify a [`ProofWithPublicInputs`] generated from a [`crate::prover::WormholeProver`].
    ///
    /// # Errors
    ///
    /// Returns an error if the proof is not valid.
    pub fn verify(&self, proof: ProofWithPublicInputs<F, C, D>) -> anyhow::Result<()> {
        self.circuit_data.verify(proof)
    }
}
