//! Verifier logic for the Wormhole circuit.
//!
//! This module provides the [`WormholeVerifier`] type, which allows for the verification of
//! zero-knowledge proofs generated by the Wormhole circuit.
//!
//! The typical usage flow involves:
//! 1. Initializing the verifier from pre-built circuit data via [`WormholeVerifier::from_file()`] or [`WormholeVerifier::from_bytes()`].
//! 2. Generating a [`ProofWithPublicInputs`].
//! 3. Verifying the proof using [`WormholeVerifier::verify`].
//!
//!# Example
//!
//! Create a verifier and verify a proof:
//!
//!```no_run
//! use wormhole_circuit::inputs::{CircuitInputs, PrivateCircuitInputs, PublicCircuitInputs};
//! use wormhole_circuit::nullifier::Nullifier;
//! use wormhole_circuit::storage_proof::ProcessedStorageProof;
//! use wormhole_circuit::substrate_account::SubstrateAccount;
//! use wormhole_circuit::unspendable_account::UnspendableAccount;
//! use wormhole_prover::WormholeProver;
//! use wormhole_verifier::WormholeVerifier;
//! use plonky2::plonk::circuit_data::CircuitConfig;
//!
//! # fn main() -> anyhow::Result<()> {
//! // Create inputs. In practice, each input would be gathered from the real node.
//! let inputs = CircuitInputs {
//!     private: PrivateCircuitInputs {
//!         secret: vec![1u8; 32],
//!         transfer_count: 0,
//!         funding_account: [2u8; 32].into(),
//!         storage_proof: ProcessedStorageProof::new(vec![], vec![]).unwrap(),
//!         unspendable_account: [1u8; 32].into(),
//!     },
//!     public: PublicCircuitInputs {
//!         funding_amount: 1000,
//!         nullifier: [1u8; 32].into(),
//!         root_hash: [0u8; 32].into(),
//!         exit_account: [2u8; 32].into(),
//!     },
//! };
//!
//! // In a real application, a circuit builder binary would serialize the circuit,
//! // and the prover and verifier would load it from a file.
//!
//! // Generate a proof.
//! let config = CircuitConfig::standard_recursion_config();
//! let prover = WormholeProver::new(config);
//! let prover_next = prover.commit(&inputs)?;
//! let proof = prover_next.prove()?;
//!
//! // Verify the proof
//! let verifier = WormholeVerifier::from_file()?;
//! verifier.verify(proof).map_err(|e| anyhow::anyhow!(e))?;
//! # Ok(())
//! # }
//! ```
#![cfg_attr(not(feature = "std"), no_std)]

#[cfg(not(feature = "std"))]
extern crate alloc;

use wormhole_circuit::circuit::circuit_data_from_bytes;
use zk_circuits_common::circuit::{C, D, F};

#[cfg(feature = "std")]
use plonky2::plonk::circuit_data::CircuitConfig;
#[cfg(feature = "std")]
use wormhole_circuit::circuit::WormholeCircuit;

use plonky2::plonk::circuit_data::VerifierCircuitData;
pub use plonky2::plonk::proof::ProofWithPublicInputs;

pub struct WormholeVerifier {
    pub circuit_data: VerifierCircuitData<F, C, D>,
}

impl WormholeVerifier {
    #[cfg(feature = "std")]
    pub fn new(config: CircuitConfig, circuit_data: Option<VerifierCircuitData<F, C, D>>) -> Self {
        let wormhole_circuit = WormholeCircuit::new(config);
        let circuit_data = match circuit_data {
            Some(circuit_data) => circuit_data,
            None => wormhole_circuit.build_verifier(),
        };

        Self { circuit_data }
    }

    /// Creates a new [`WormholeVerifier`] from circuit data bytes.
    pub fn from_bytes(bytes: &[u8]) -> Result<Self, &'static str> {
        let circuit_data =
            circuit_data_from_bytes(bytes).map_err(|_| "failed to deserialize circuit data")?;
        Ok(Self {
            circuit_data: circuit_data.verifier_data(),
        })
    }

    /// Creates a new [`WormholeVerifier`] from a circuit data file.
    #[cfg(feature = "std")]
    pub fn from_file() -> anyhow::Result<Self> {
        let circuit_data_bytes = std::fs::read("circuit_data.bin")?;
        Self::from_bytes(&circuit_data_bytes)
            .map_err(|e| anyhow::anyhow!("Failed to create verifier from bytes: {}", e))
    }

    /// Verify a [`ProofWithPublicInputs`].
    ///
    /// # Errors
    ///
    /// Returns an error if the proof is not valid.
    pub fn verify(&self, proof: ProofWithPublicInputs<F, C, D>) -> Result<(), &'static str> {
        self.circuit_data
            .verify(proof)
            .map_err(|_| "proof verification failed")
    }
}
